// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using centre_soutien.DataAccess;

#nullable disable

namespace centre_soutien.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250531233957_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("centre_soutien.Models.DetailPaiement", b =>
                {
                    b.Property<int>("IDDetailPaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnneeMoisConcerne")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IDInscription")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDPaiement")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MontantPayePourEcheance")
                        .HasColumnType("REAL");

                    b.HasKey("IDDetailPaiement");

                    b.HasIndex("IDInscription");

                    b.HasIndex("IDPaiement");

                    b.ToTable("DetailsPaiements");
                });

            modelBuilder.Entity("centre_soutien.Models.Etudiant", b =>
                {
                    b.Property<int>("IDEtudiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateInscriptionSysteme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateNaissance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstArchive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lycee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDEtudiant");

                    b.HasIndex("Telephone")
                        .IsUnique()
                        .HasFilter("[Telephone] IS NOT NULL");

                    b.ToTable("Etudiants");
                });

            modelBuilder.Entity("centre_soutien.Models.Groupe", b =>
                {
                    b.Property<int>("IDGroupe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstArchive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDMatiere")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDProfesseur")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Niveau")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomDescriptifGroupe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDGroupe");

                    b.HasIndex("IDMatiere");

                    b.HasIndex("IDProfesseur");

                    b.HasIndex("NomDescriptifGroupe")
                        .IsUnique();

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("centre_soutien.Models.Inscription", b =>
                {
                    b.Property<int>("IDInscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateDesinscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateInscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstActif")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDEtudiant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDGroupe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JourEcheanceMensuelle")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PrixConvenuMensuel")
                        .HasColumnType("REAL");

                    b.HasKey("IDInscription");

                    b.HasIndex("IDGroupe");

                    b.HasIndex("IDEtudiant", "IDGroupe")
                        .IsUnique();

                    b.ToTable("Inscriptions");
                });

            modelBuilder.Entity("centre_soutien.Models.Matiere", b =>
                {
                    b.Property<int>("IDMatiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstArchivee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomMatiere")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<double>("PrixStandardMensuel")
                        .HasColumnType("REAL");

                    b.HasKey("IDMatiere");

                    b.HasIndex("NomMatiere")
                        .IsUnique();

                    b.ToTable("Matieres");
                });

            modelBuilder.Entity("centre_soutien.Models.Paiement", b =>
                {
                    b.Property<int>("IDPaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatePaiement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IDEtudiant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDUtilisateurEnregistrement")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MontantTotalRecuTransaction")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDPaiement");

                    b.HasIndex("IDEtudiant");

                    b.HasIndex("IDUtilisateurEnregistrement");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("centre_soutien.Models.Professeur", b =>
                {
                    b.Property<int>("IDProfesseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstArchive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDProfesseur");

                    b.HasIndex("Telephone")
                        .IsUnique()
                        .HasFilter("[Telephone] IS NOT NULL");

                    b.ToTable("Professeurs");
                });

            modelBuilder.Entity("centre_soutien.Models.ProfesseurMatiere", b =>
                {
                    b.Property<int>("IDProfesseurMatiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDMatiere")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDProfesseur")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PourcentageRemuneration")
                        .HasColumnType("REAL");

                    b.HasKey("IDProfesseurMatiere");

                    b.HasIndex("IDMatiere");

                    b.HasIndex("IDProfesseur", "IDMatiere")
                        .IsUnique();

                    b.ToTable("ProfesseurMatieres");
                });

            modelBuilder.Entity("centre_soutien.Models.Salle", b =>
                {
                    b.Property<int>("IDSalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Capacite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstArchivee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomOuNumeroSalle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("IDSalle");

                    b.HasIndex("NomOuNumeroSalle")
                        .IsUnique();

                    b.ToTable("Salles");
                });

            modelBuilder.Entity("centre_soutien.Models.SeancePlanning", b =>
                {
                    b.Property<int>("IDSeance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateSeance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HeureDebut")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HeureFin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IDGroupe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDSalle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatutSeance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDSeance");

                    b.HasIndex("IDGroupe", "DateSeance", "HeureDebut")
                        .IsUnique();

                    b.HasIndex("IDSalle", "DateSeance", "HeureDebut")
                        .IsUnique();

                    b.ToTable("SeancesPlanning");
                });

            modelBuilder.Entity("centre_soutien.Models.Utilisateur", b =>
                {
                    b.Property<int>("IDUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstActif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MotDePasseHashe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDUtilisateur");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("centre_soutien.Models.DetailPaiement", b =>
                {
                    b.HasOne("centre_soutien.Models.Inscription", "Inscription")
                        .WithMany("DetailsPaiements")
                        .HasForeignKey("IDInscription")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Paiement", "Paiement")
                        .WithMany("DetailsPaiements")
                        .HasForeignKey("IDPaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscription");

                    b.Navigation("Paiement");
                });

            modelBuilder.Entity("centre_soutien.Models.Groupe", b =>
                {
                    b.HasOne("centre_soutien.Models.Matiere", "Matiere")
                        .WithMany("Groupes")
                        .HasForeignKey("IDMatiere")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Professeur", "Professeur")
                        .WithMany("Groupes")
                        .HasForeignKey("IDProfesseur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("centre_soutien.Models.Inscription", b =>
                {
                    b.HasOne("centre_soutien.Models.Etudiant", "Etudiant")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IDEtudiant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Groupe", "Groupe")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IDGroupe")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Etudiant");

                    b.Navigation("Groupe");
                });

            modelBuilder.Entity("centre_soutien.Models.Paiement", b =>
                {
                    b.HasOne("centre_soutien.Models.Etudiant", "Etudiant")
                        .WithMany("Paiements")
                        .HasForeignKey("IDEtudiant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Utilisateur", "UtilisateurEnregistrement")
                        .WithMany("PaiementsEnregistres")
                        .HasForeignKey("IDUtilisateurEnregistrement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Etudiant");

                    b.Navigation("UtilisateurEnregistrement");
                });

            modelBuilder.Entity("centre_soutien.Models.ProfesseurMatiere", b =>
                {
                    b.HasOne("centre_soutien.Models.Matiere", "Matiere")
                        .WithMany("ProfesseurMatieres")
                        .HasForeignKey("IDMatiere")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Professeur", "Professeur")
                        .WithMany("ProfesseurMatieres")
                        .HasForeignKey("IDProfesseur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("centre_soutien.Models.SeancePlanning", b =>
                {
                    b.HasOne("centre_soutien.Models.Groupe", "Groupe")
                        .WithMany("SeancesPlanning")
                        .HasForeignKey("IDGroupe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("centre_soutien.Models.Salle", "Salle")
                        .WithMany("SeancesPlanning")
                        .HasForeignKey("IDSalle")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Groupe");

                    b.Navigation("Salle");
                });

            modelBuilder.Entity("centre_soutien.Models.Etudiant", b =>
                {
                    b.Navigation("Inscriptions");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("centre_soutien.Models.Groupe", b =>
                {
                    b.Navigation("Inscriptions");

                    b.Navigation("SeancesPlanning");
                });

            modelBuilder.Entity("centre_soutien.Models.Inscription", b =>
                {
                    b.Navigation("DetailsPaiements");
                });

            modelBuilder.Entity("centre_soutien.Models.Matiere", b =>
                {
                    b.Navigation("Groupes");

                    b.Navigation("ProfesseurMatieres");
                });

            modelBuilder.Entity("centre_soutien.Models.Paiement", b =>
                {
                    b.Navigation("DetailsPaiements");
                });

            modelBuilder.Entity("centre_soutien.Models.Professeur", b =>
                {
                    b.Navigation("Groupes");

                    b.Navigation("ProfesseurMatieres");
                });

            modelBuilder.Entity("centre_soutien.Models.Salle", b =>
                {
                    b.Navigation("SeancesPlanning");
                });

            modelBuilder.Entity("centre_soutien.Models.Utilisateur", b =>
                {
                    b.Navigation("PaiementsEnregistres");
                });
#pragma warning restore 612, 618
        }
    }
}
